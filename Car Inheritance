abstract class Car {
    abstract boolean getIsSedan();
    abstract int getSeats();
    abstract String getMileage();
}

class WagonR extends Car {
    private int mileage;

    WagonR(int mileage) {
        this.mileage = mileage;
    }

    @Override
    boolean getIsSedan() {
        return false;
    }

    @Override
    int getSeats() {
        return 4;
    }

    @Override
    String getMileage() {
        return mileage + " kmpl";
    }
}

class HondaCity extends Car {
    private int mileage;

    HondaCity(int mileage) {
        this.mileage = mileage;
    }

    @Override
    boolean getIsSedan() {
        return true;
    }

    @Override
    int getSeats() {
        return 4;
    }

    @Override
    String getMileage() {
        return mileage + " kmpl";
    }
}

class InnovaCrysta extends Car {
    private int mileage;

    InnovaCrysta(int mileage) {
        this.mileage = mileage;
    }

    @Override
    boolean getIsSedan() {
        return false;
    }

    @Override
    int getSeats() {
        return 6;
    }

    @Override
    String getMileage() {
        return mileage + " kmpl";
    }
}

public class Main {
    public static void main(String[] args) {
        int type = Integer.parseInt(args[0]);
        int mileage = Integer.parseInt(args[1]);

        Car car;

        if (type == 0) {
            car = new WagonR(mileage);
        } else if (type == 1) {
            car = new HondaCity(mileage);
        } else {
            car = new InnovaCrysta(mileage);
        }

        String sedanStatus = car.getIsSedan() ? "Sedan" : "not Sedan";
        int seats = car.getSeats();
        String carMileage = car.getMileage();

        System.out.println("A " + car.getClass().getSimpleName() + " is " + sedanStatus +
                           ", is " + seats + "-seater, and has a mileage of around " +
                           carMileage + ".");
    }
}
output:
A HondaCity is Sedan, is 4-seater, and has a mileage of around 12 kmpl.
